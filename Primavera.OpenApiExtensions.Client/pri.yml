openapi: "3.0.2"
x-Primavera-Extensions:   
    Pri-Enums: 
        - HttpMethods: 
            schema:
                $ref: "#/components/schemas/HttpMethod"
    Pri-Models:
        - modelx: test
    Pri-Resources:
        - storage: sqlserver
    Pri-Documentation: true

info:
  title: "Primavera API"
  x-Primavera-Resource:  
  description: "<h1>Primavera Api document example.</h1> <p>**Note**: This is an `example` generated from Primavera OpenApi.</p>"
  version: "2.5"
  termsOfService: "https://Primavera.org/terms"
  contact:
    name: "Primavera API"
    url: "https://Primavera.org/api"
    email: "some_email@gmail.com"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: "https://Primavera.org/price"

    
servers: 
- url: https://Api-Pri-{name}.com:{port}/{environment}/{version}/{basePath}
  description: The production API server
  variables:
    name:
      # note! no enum here means it is an open value
      default: demo
      description: descricao do atributo name
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    environment:
      enum:
        - 'dev'
        - 'test'
        - 'prod'
      default: 'dev'
    version:
      # note! no enum here means it is an open value
      default: 'v1.0.0'
      description: descricao do atributo version
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `controller`
      default: controller
    
paths:
    /clients:
    
        get:
            summary: Lists all the clients delimited by pages
            operationId: listClients
            tags:
              - clients
            parameters: 
              - name: limit
                in: query
                description: How many items to return per page
                required: false
                deprecated: false
                allowEmptyValue: false
                schema:
                  type: integer
                  format: int32
            responses:
              '200':
                description:  Paged  array of Clients
                headers:
                  x-next:
                    description: a link to the next page of responses
                    schema:
                      type: string
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Clients"
              default:
                description: unexpected error
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Error"
        post:
          summary: Create a client
          operationId: createClients
          tags:
            - clients
          responses:
            '201':
              description: "Null Response"
            default: 
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Error"
    /clients/{clientId}:
        get:
          summary: Details of a specific client
          operationId: showClientById
          tags:
            - clients
          parameters: 
            - name: clientId
              in: path
              required: true
              description: The id of the client to retrieve
              schema:
                type: string
          responses:
            '200':
              description: Expected response to a valid request
              content:
                application/json:
                  schema: 
                    $ref: "#/components/schemas/Clients"
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Error"


   
components:
  schemas:
    HttpMethod:
      type: string
      enum:
        - Get
        - Post
        - Put
        - Patch
        - Delete
    HttpStatusCode:
      type: string
      enum:
        - NoContent
        - Any
        - Ok
        - Created
    Client:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name: 
          type: string
        tag: 
          type: string
    Clients:
      type: array
      items:
        $ref: "#/components/schemas/Client"
    Error:
      required:
        - code
        - message
      properties:
        code: 
          type: integer
          format: int32
        message: 
          type: string
  securitySchemes:
    microservice_auth:
      type: oauth2
      flows: 
        authorizationCode:
          authorizationUrl: https://example.com/api/oauth/dialog
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets 